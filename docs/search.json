[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement jason@bryer.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/contributing.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Contributing To The Project","text":"need complete typical Github pre-tasks: registration; creating personal access token; creating fork; finally, creating clone Github fork local workstation. creating Github account, go profile settings select ‘Developer Settings’ ‘Personal Access Tokens’ ‘Tokens (classic).’ following screen directions generate new token, sure save token safe place; need later. Next, create fork mldash project https://github.com/jbryer/mldash click ‘fork’ button can keep downstream copy project. page forked repository, retrieve SSH URL link project. local workstation, perform git clone URL link previous step. issue ‘git remote show origin’ command command line terminal, see something similar following:","code":"$ git remote show origin * remote origin   Fetch URL: https://github.com/cliftonleesps/mldash   Push  URL: https://github.com/cliftonleesps/mldash   HEAD branch: master   Remote branches:     master     tracked     ml_results tracked   Local branch configured for 'git pull':     master merges with remote master   Local ref configured for 'git push':     master pushes to master (fast-forwardable)"},{"path":"/articles/contributing.html","id":"contributing-a-new-dataset","dir":"Articles","previous_headings":"","what":"Contributing a New Dataset","title":"Contributing To The Project","text":"add dataset, simply define Debian Control Format described . creating new *.dcf file, use git add, commit push new file Github (substitute NEW_DATASET name particular file): successful git push action, go Github confirm new dataset appears forked repository. last task click ‘Pull requests’ tab “New pull request” “Create pull request” button. point, project maintainer upstream mldash project review new *.dcf file approved merge.","code":"$ git add inst/datasets/NEW_DATASET.dcf $ git commit -m \"Adding new dataset\" inst/datasets/NEW_DATASET.dcf $ git push"},{"path":"/articles/contributing.html","id":"contributing-a-new-model","dir":"Articles","previous_headings":"","what":"Contributing a New Model","title":"Contributing To The Project","text":"Similarly, can go Creating New Models page details creating new model. new model DCF file, follow steps adding new dataset file (substitute NEW_MODEL model’s name): adding new dataset, go Github create pull request https://github.com/jbryer/mldash project.","code":"$ git add inst/models/NEW_MODEL.dcf $ git commit -m \"Adding new model\" inst/models/NEW_MODEL.dcf $ git push"},{"path":"/articles/contributing.html","id":"contributing-a-model-run","dir":"Articles","previous_headings":"","what":"Contributing a Model Run","title":"Contributing To The Project","text":"running models mldash::run_models() saving results dataframe (see ), can save results file /inst/results file (substitute RESULTS_FILE filename), inside R session: now new results file mldash/inst/results directory terminal, can now commit push Github: , last step going Github creating pull request https://github.com/jbryer/mldash project.","code":"ml_results <- mldash::run_models(datasets = ml_datasets,                                   models = ml_models,                                   seed = 2112)  saveRDS(ml_results, file.path(\"inst\",\"results\",\"RESULTS_FILE.rds\")) git add inst/results/RESULTS_FILE.rds git commit -m \"Contributing a model run\" inst/results/RESULTS_FILE.rds git push"},{"path":"/articles/installation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Installation of System Requirements","text":"Configuring workstation run mldash requires installing major components: R; Python; Java. course, mldash runs tidymodels natively R. However, mldash also run Python (e.g. Prophet) & Java (Weka) models guide outline steps build working environment. Depending operating system, can use various system tools package managers ease installation process. end guide, workstation meets following goals: Runs R R Studio required R library dependencies installed R pointing functioning Python environment dependencies R pointing functioning Java run time environment Note: directions tested macOS 12.6 (Monterey M1 MacBook, ARM processor) Red Hat Enterprise Linux (RHEL) 9. steps tested platforms.","code":""},{"path":"/articles/installation.html","id":"installing-r-rstudio","dir":"Articles","previous_headings":"","what":"Installing R & RStudio","title":"Installation of System Requirements","text":"can download install R binary Crane Project home page. Next ’ll need install RStudio, integrated development environment.","code":""},{"path":"/articles/installation.html","id":"macos","dir":"Articles","previous_headings":"Installing R & RStudio","what":"macOS","title":"Installation of System Requirements","text":"RStudio session, can install required libraries console window:","code":"install.packages(\"glmnet\") install.packages(\"brulee\") install.packages(\"fastDummies\") install.packages(\"kknn\") install.packages(\"plsmod\") install.packages(\"remotes\") install.packages(\"baguette\") install.packages(\"libcoin\") install.packages(\"earth\") install.packages(\"dbarts\") install.packages(\"xgboost\") install.packages(\"forecast\") install.packages(\"modeltime\")"},{"path":"/articles/installation.html","id":"installing-the-mix0mics-library","dir":"Articles","previous_headings":"Installing R & RStudio > macOS","what":"Installing the mix0mics Library","title":"Installation of System Requirements","text":"install mix0mics library, need install BiocManager package.","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"mixOmics\")"},{"path":"/articles/installation.html","id":"red-hat-enterprise-linux","dir":"Articles","previous_headings":"Installing R & RStudio","what":"Red Hat Enterprise Linux","title":"Installation of System Requirements","text":"Installing R dependencies similar:","code":"install.packages(c(\"baguette\",\"libcoin\",\"earth\",\"dbarts\",\"xgboost\",\"forecast\",\"modeltime\",\"glmnet\",\"brulee\",\"fastDummies\",\"kknn\",\"plsmod\"))  install.packages(c(\"BiocManager\"),type=\"binary\")  install.packages(c(\"poissonreg\",\"pscl\",\"ranger\",\"kernlab\",\"mda\",\"discrim\",\"sda\",\"sparsediscrim\",\"klaR\",\"LiblineaR\",\"naivebayes\",\"rules\",\"MASS\",\"baguette\"),type=\"binary\")   install.packages(c(\"dbarts\",\"discrim\",\"earth\",\"fastDummies\",\"glmnet\",\"keras\",\"kernlab\",\"kknn\",\"klaR\",\"mda\",\"mgcv\",\"mixOmics\",\"naivebayes\",\"nnet\",\"parsnip\", \"plsmod\",\"poissonreg\",\"randomForest\",\"ranger\",\"rpart\",\"rstanarm\",\"rules\",\"sda\",\"sparsediscrim\",\"stats\",\"xgboost\",\"xrf\"),type=\"binary\")"},{"path":"/articles/installation.html","id":"installing-python---method-1-with-miniconda","dir":"Articles","previous_headings":"","what":"Installing Python - Method #1 with Miniconda","title":"Installation of System Requirements","text":"Many models require Python executed using reticulate package. , personally, found installation configuration Python frustrating, especially Mac M1. However, writing, following works (system). First, install packages Github ensure latest version. previously installed Miniconda, helpful start clean slate. can install Miniconda using following command: installed, can create conda environment: make active (note sure necessary three packages, doesn’t hurt): Although utility functions install keras, tensorflow, torch respective packages, found always work expected. conda_install function ensure Python packages installed correct environment. Note writing, pytorch still Mac M1 native version predictive models work platform. Lastly, ensure reticulate uses correct Python setting RETICULATE_PYTHON environment variable (can also put .Renviron file used across sessions, though avoid can use different Python paths different projects).","code":"remotes::install_github(sprintf(\"rstudio/%s\", c(\"reticulate\", \"tensorflow\", \"keras\", \"torch\"))) reticulate::miniconda_uninstall() reticulate::install_miniconda() reticulate::conda_create(\"mldash\") reticulate::use_condaenv(\"mldash\") tensorflow::use_condaenv(\"mldash\") keras::use_condaenv(\"mldash\") reticulate::conda_install(\"mldash\",                c(\"jupyterlab\", \"pandas\", \"statsmodels\",                 \"scipy\", \"scikit-learn\", \"matplotlib\",                 \"seaborn\", \"numpy\", \"pytorch\", \"tensorflow\")) Sys.setenv(\"RETICULATE_PYTHON\" = \"~/miniforge3/envs/mldash/bin/python\")"},{"path":"/articles/installation.html","id":"installing-python---method-2-with-mambaforge","dir":"Articles","previous_headings":"","what":"Installing Python - Method #2 with Mambaforge","title":"Installation of System Requirements","text":"macOS RHEL, Python 3.x pre-installed (either python python3) ’ll really need lot Python modules. can get Mambaforge installer (Mambaforge’s Github page)[https://github.com/conda-forge/miniforge#mambaforge]. Now can use install many model library dependencies. previous method, set environment variable Mamba-Python binary:","code":"mamba activate mldash mamba install -y jupyterlab mamba install -y pandas mamba install -y statsmodels  mamba install -y scipy mamba install -y scikit-learn mamba install -y matplotlib  mamba install -y seaborn mamba install -y numpy mamba install -y pytorch mamba install -y tensorflow Sys.setenv(\"RETICULATE_PYTHON\" = \"~/mambaforge/envs/mldash/bin/python\")"},{"path":"/articles/installation.html","id":"installing-java-macos","dir":"Articles","previous_headings":"","what":"Installing Java (macOS)","title":"Installation of System Requirements","text":"need install Java version 8 development kit compiled ARM processor. One found work Azul. Follow install directions explicitly set environment variable JAVA_HOME, otherwise R try use system’s default pre-installed Java virtual machine.","code":"Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/')"},{"path":"/articles/installation.html","id":"installing-java-rhel","dir":"Articles","previous_headings":"","what":"Installing Java (RHEL)","title":"Installation of System Requirements","text":"Linux, can use regular yum package manager install OpenJDK version 8 command line. Unlike macOS, shouldn’t need set JAVA_HOME since Java normally part system $PATH variable normally linked correct version. course, multiple Java versions, go ahead specify JAVA_HOME safety.","code":"$ sudo yum install -y java-1.8.0-openjdk"},{"path":"/articles/installation.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Installation of System Requirements","text":"Now R, Python Java installed can start Running Predictive Models.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jason Bryer. Author, maintainer. Angela Lui. Contributor. Justin Williams. Contributor. David Simbandumwe. Contributor. Clifton Lee. Contributor. Shane Hylton. Contributor. Joseph Connolly. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryer J (2023). mldash: Evaluating Machine Learning Models Across Many Datasets. R package version 0.1.0, https://jbryer.github.io/mldash/.","code":"@Manual{,   title = {mldash: Evaluating Machine Learning Models Across Many Datasets},   author = {Jason Bryer},   year = {2023},   note = {R package version 0.1.0},   url = {https://jbryer.github.io/mldash/}, }"},{"path":"/index.html","id":"mldash-machine-learning-dashboard-","dir":"","previous_headings":"","what":"Machine Learning Dashboard","title":"Machine Learning Dashboard","text":"Contact: Jason Bryer, Ph.D.Website: https://jbryer.github.io/mldash/ goal mldash provide framework evaluating performance many predictive models across many datasets. package includes common predictive modeling procedures datasets. Details contribute additional datasets models outlined . datasets models defined Debian Control File (dcf) format. provides convenient format storing metadata datasets models also R code snippets retrieving data, training models, getting predictions. run_models function handles executing model dataset (appropriate predictive model type, .e. classification regression), splitting data training validation sets, calculating desired performance metrics utilizing yardstick package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Machine Learning Dashboard","text":"can install development version mldash using remotes package like : mldash package makes use predictive models implemented R, Python, Java. result, numerous system requirements necessary run models. included instructions installation vignette:","code":"remotes::install_github('jbryer/mldash') vignette('installation', package = 'mldash')"},{"path":"/index.html","id":"running-predictive-models","dir":"","previous_headings":"","what":"Running Predictive Models","title":"Machine Learning Dashboard","text":"begin, read datasets using read_ml_datasets() function. two parameters: dir directory containing metadata files. default look package’s installation directory. cache_dir directory datasets can stored locally. lists datasets currenlty included package. Similarly, read_ml_models read models. dir parameter defines look model files. datasets models loaded, run_models train evaluate model dataset appropriate model type. metrics parameter run_models() takes list metrics yardstick package (Kuhn & Vaughan, 2021). full list metrics available : https://yardstick.tidymodels.org/articles/metric-types.html","code":"ml_datasets <- mldash::read_ml_datasets(dir = 'inst/datasets',                                         cache_dir = 'inst/datasets') # head(ml_datasets, n = 4) ml_models <- mldash::read_ml_models(dir = 'inst/models') #> Warning in mldash::read_ml_models(dir = \"inst/models\"): The following packages #> are not installed but required by the models: FCNN4R, mxnet # head(ml_models, n = 4) ml_results <- mldash::run_models(datasets = ml_datasets,                                   models = ml_models,                                   seed = 2112)"},{"path":"/index.html","id":"available-datasets","dir":"","previous_headings":"","what":"Available Datasets","title":"Machine Learning Dashboard","text":"27 included mldash package. can view packages datasets vignette.","code":"vignette('datasets', package = 'mldash')"},{"path":"/index.html","id":"available-models","dir":"","previous_headings":"","what":"Available Models","title":"Machine Learning Dashboard","text":"model defined Debian Control File (DCF) format details described . list models included mldash package. Note models begin tm_ models implemented tidymodels R package; models begin weka_ models implemented RWeka wrapper Weka collection machine learning algorithms. 413 included mldash package. can view models models vignette.","code":"vignette('models', package = 'mldash')"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Machine Learning Dashboard","text":"Please note mldash project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/add_ml_results.html","id":null,"dir":"Reference","previous_headings":"","what":"add_ml_results — add_ml_results","title":"add_ml_results — add_ml_results","text":"Saves ml_results object RDS file creates pull request forked mldash project","code":""},{"path":"/reference/add_ml_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_ml_results — add_ml_results","text":"","code":"add_ml_results(ml_results = NULL, repo = NULL, prefix = NULL)"},{"path":"/reference/add_ml_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_ml_results — add_ml_results","text":"ml_results dataframe returned ml_dash::run_ml_models() function repo git_repository object returned local_clone() prefix creating RDS files, optional prefix used; otherwise set github username","code":""},{"path":"/reference/add_ml_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_ml_results — add_ml_results","text":"results pull request action","code":""},{"path":"/reference/check_java.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if Java is installed. — check_java","title":"Checks if Java is installed. — check_java","text":"function checks see JAVA_HOME environment variable set. check see Java installed platforms.","code":""},{"path":"/reference/check_java.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if Java is installed. — check_java","text":"","code":"check_java()"},{"path":"/reference/check_java.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if Java is installed. — check_java","text":"TRUE JAVA_HOME set.","code":""},{"path":"/reference/check_java.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if Java is installed. — check_java","text":"install Java Mac (assuming Homebrew installed):   install Java Ubuntu run:","code":"brew tap adoptopenjdk/openjdk brew install --cask adoptopenjdk8 sudo apt-get install openjdk-8-jdk"},{"path":"/reference/check_python.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if Python is installed. — check_python","title":"Checks if Python is installed. — check_python","text":"function checks see RETICULATE_PYTHON environment variable set. check see python installed platforms.","code":""},{"path":"/reference/check_python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if Python is installed. — check_python","text":"","code":"check_python()"},{"path":"/reference/check_python.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if Python is installed. — check_python","text":"TRUE RETICULATE_PYTHON set.","code":""},{"path":"/reference/get_all_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns all metrics from the yardstick package. — get_all_metrics","title":"Returns all metrics from the yardstick package. — get_all_metrics","text":"convenience function return metrics yardstick package can used run_models() function.","code":""},{"path":"/reference/get_all_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns all metrics from the yardstick package. — get_all_metrics","text":"","code":"get_all_metrics(include_multiclass = FALSE)"},{"path":"/reference/get_all_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns all metrics from the yardstick package. — get_all_metrics","text":"list metric functions yardstick package.","code":""},{"path":[]},{"path":"/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads in a data frame for a model file — get_data","title":"Reads in a data frame for a model file — get_data","text":"Reads data frame model file","code":""},{"path":"/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads in a data frame for a model file — get_data","text":"","code":"get_data(   dataname,   dir = paste0(find.package(\"mldash\"), \"/datasets\"),   cache_dir = tempdir(),   use_cache = TRUE )"},{"path":"/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads in a data frame for a model file — get_data","text":"dir directory containing dcf files datasets. cache_dir directory rds data files stored. use_cache whether read data cache available. FALSE, data retrieved data function parameter.","code":""},{"path":"/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads in a data frame for a model file — get_data","text":"data.frame data.","code":""},{"path":"/reference/get_timeseries_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns time series metrics from the yardstick package. — get_timeseries_metrics","title":"Returns time series metrics from the yardstick package. — get_timeseries_metrics","text":"convenience function return time series  metrics yardstick package can used run_models() function.","code":""},{"path":"/reference/get_timeseries_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns time series metrics from the yardstick package. — get_timeseries_metrics","text":"","code":"get_timeseries_metrics(include_multiclass = FALSE)"},{"path":"/reference/get_timeseries_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns time series metrics from the yardstick package. — get_timeseries_metrics","text":"list time series metric functions yardstick package.","code":""},{"path":[]},{"path":"/reference/local_clone.html","id":null,"dir":"Reference","previous_headings":"","what":"local_clone — local_clone","title":"local_clone — local_clone","text":"Clone mldash project temp directory","code":""},{"path":"/reference/local_clone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"local_clone — local_clone","text":"","code":"local_clone(repo_upstream = NULL, verbose = FALSE)"},{"path":"/reference/local_clone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"local_clone — local_clone","text":"repo_upstream  name model. verbose show debug output cloning process","code":""},{"path":"/reference/mldash-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mldash: Evaluating Machine Learning Models Across Many Datasets — mldash-package","title":"mldash: Evaluating Machine Learning Models Across Many Datasets — mldash-package","text":"Framework evaluating predictive models across many datasets. Datasets models defined debian control files. Data can retrieved many sources package execute evaluate predictive models using hold-validation dataset using common metrics defined yardstick package.","code":""},{"path":[]},{"path":"/reference/mldash-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mldash: Evaluating Machine Learning Models Across Many Datasets — mldash-package","text":"Maintainer: Jason Bryer jason@bryer.org (ORCID) contributors: Angela Lui angela.lui@cuny.edu [contributor] Justin Williams [contributor] David Simbandumwe [contributor] Clifton Lee [contributor] Shane Hylton [contributor] Joseph Connolly [contributor]","code":""},{"path":"/reference/new_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new data set metadata file. — new_dataset","title":"Create a new data set metadata file. — new_dataset","text":"Create new data set metadata file.","code":""},{"path":"/reference/new_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new data set metadata file. — new_dataset","text":"","code":"new_dataset(   name,   dir = \"./inst/datasets\",   type = c(\"classification\", \"regression\")[1],   description = \"Description of the dataset\",   source = \"The source of the dataset.\",   reference = \"APA reference for the dataset.\",   data = \"function() {\\n\\t# This function should return a data.frame.\\n\\t}\",   model = \"Y ~ X\",   note = \"\",   open = interactive(),   overwrite = FALSE )"},{"path":"/reference/new_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new data set metadata file. — new_dataset","text":"list metadata information.","code":""},{"path":"/reference/new_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new data set metadata file. — new_model","title":"Create a new data set metadata file. — new_model","text":"Create new data set metadata file.","code":""},{"path":"/reference/new_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new data set metadata file. — new_model","text":"","code":"new_model(   filename,   name,   type,   dir = \"./inst/models\",   description = \"Description of the dataset\",   train_fun = \"function(formula, data) {\\n\\t# Run predictive model.\\n\\t}\",   predict_fun =     \"function(model, newdata) {\\n\\t# Return predicted probabilities for classification or nemeric values for regression.\\n\\t}\",   packages = \"\",   note = \"\",   open = interactive(),   overwrite = FALSE )"},{"path":"/reference/new_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new data set metadata file. — new_model","text":"filename name file created. id model. name  name model. type type model, either regression (quantitative dependent variables), classification (qualitative dependent variables). dir directory store model file. description brief description model. train_fun function return trained model. Must two parameters: formula data. predict_fun function return predicted probabilities classification models predicted Y-values regression models. packages comma separated list packages need loaded prior running either train_fun predict_fun. note additional descriptions model. open whether open file editing created. overwrite whether overwrite model file already exists.","code":""},{"path":"/reference/new_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new data set metadata file. — new_model","text":"list metadata information.","code":""},{"path":"/reference/read_ml_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads model files for running predictive models. — read_ml_datasets","title":"Reads model files for running predictive models. — read_ml_datasets","text":"Information models can used predictive models stored Debian Control Files (dcf). similar format used RMarkdown YAML (.e. metadata).","code":""},{"path":"/reference/read_ml_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads model files for running predictive models. — read_ml_datasets","text":"","code":"read_ml_datasets(   dir = c(paste0(find.package(\"mldash\"), \"/datasets\")),   cache_dir = dir,   pattern = \"*.dcf\",   use_cache = TRUE,   check_for_missing_packages = interactive() )"},{"path":"/reference/read_ml_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads model files for running predictive models. — read_ml_datasets","text":"dir directory containing dcf files datasets. pattern optional regular expression used finding files read . defaults dcf files dir, single filename test metadata file. use_cache whether read data cache available. FALSE, data retrieved data function parameter. check_for_missing_packages TRUE prompted install missing packages. data_cache directory rds data files stored.","code":""},{"path":"/reference/read_ml_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads model files for running predictive models. — read_ml_datasets","text":"data frame following fields: idThe filename dataset. title*name dataset dcf file. type*Whether regression classification model. descriptionDescription dataset. sourceThe source dataset. referenceReference dataset (APA format preferred). model*model formula used predictive model. noteAny additional information. denotes required fields.","code":""},{"path":"/reference/read_ml_datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reads model files for running predictive models. — read_ml_datasets","text":"name*name dataset. type*Whether regression, classification, timeseries, spatial model. descriptionDescription dataset. sourceThe source dataset. referenceReference dataset (APA format preferred). data*R function returns data.frame. model*formula used predictive model. noteAny additional information. denotes required fields.","code":""},{"path":"/reference/read_ml_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads data files for running predictive models. — read_ml_models","title":"Reads data files for running predictive models. — read_ml_models","text":"Information datasets can used predictive models stored Debian Control Files (dcf). similar format used RMarkdown YAML (.e. metadata).","code":""},{"path":"/reference/read_ml_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads data files for running predictive models. — read_ml_models","text":"","code":"read_ml_models(   dir = paste0(find.package(\"mldash\"), \"/models\"),   pattern = \"*.dcf\",   check_for_missing_packages = interactive() )"},{"path":"/reference/read_ml_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads data files for running predictive models. — read_ml_models","text":"dir directory containing dcf files datasets. pattern optional regular expression used finding files read . defaults dcf files dir, single filename test metadata file. check_for_missing_packages TRUE prompted install missing packages.","code":""},{"path":"/reference/read_ml_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads data files for running predictive models. — read_ml_models","text":"data frame following fields: nameThe name dataset. typeWhether regression classification model. descriptionDescription dataset. notesAny additional information. denotes required fields.","code":""},{"path":"/reference/read_ml_models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reads data files for running predictive models. — read_ml_models","text":"name*name dataset. type*Whether regression classification model. descriptionDescription dataset. train*model formula used predictive model. predict*additional information. denotes required fields.","code":""},{"path":"/reference/run_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs the predictive models for the given datasets. — run_models","title":"Runs the predictive models for the given datasets. — run_models","text":"Runs predictive models given datasets.","code":""},{"path":"/reference/run_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs the predictive models for the given datasets. — run_models","text":"","code":"run_models(   datasets,   models,   seed = sample(1:2^15, 1),   training_size = 0.7,   print_errors = FALSE,   metrics = mldash::get_all_metrics(),   save_model_fits = FALSE,   timeout = 60 )"},{"path":"/reference/run_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs the predictive models for the given datasets. — run_models","text":"datasets datasets run models . Results read_ml_datasets(). models models run. Results read_ml_models(). seed random seed set randomly selecting training dataset. training_size proportion data used training. remaining percentage used validation. print_errors TRUE errors printed function runs. Errors always saved returned object. metrics list model performance metrics yardstick package. See https://yardstick.tidymodels.org/articles/metric-types.html information. timeout maximum amount time (seconds) model allowed run interrupted, can Inf never expire. Note models can interrupted. See R.utils::withTimeout() information.","code":""},{"path":"/reference/run_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs the predictive models for the given datasets. — run_models","text":"data.frame results models run datasets.","code":""},{"path":"/reference/shiny_mldash.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Loess shiny app. — shiny_mldash","title":"Run the Loess shiny app. — shiny_mldash","text":"start shiny app demonstrate loess_vis function.","code":""},{"path":"/reference/shiny_mldash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Loess shiny app. — shiny_mldash","text":"","code":"shiny_mldash(   model_run_dir = paste0(find.package(\"mldash\"), \"/\", model_runs),   ml_results = run_models(ml_datasets, ml_models, seed = 2112),   ... )"},{"path":"/reference/shiny_mldash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Loess shiny app. — shiny_mldash","text":"... currently used. span_range range values user allowed set span.","code":""},{"path":"/reference/shiny_server.html","id":null,"dir":"Reference","previous_headings":"","what":"The Shiny App Server. — shiny_server","title":"The Shiny App Server. — shiny_server","text":"server code mldash shiny app.","code":""},{"path":"/reference/shiny_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Shiny App Server. — shiny_server","text":"","code":"shiny_server(input, output, session)"},{"path":"/reference/shiny_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Shiny App Server. — shiny_server","text":"input input set Shiny. output output set Shiny. session session set Shiny.","code":""},{"path":"/reference/shiny_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"The Shiny App UI. — shiny_ui","title":"The Shiny App UI. — shiny_ui","text":"user interface Loess shiny app.","code":""},{"path":"/reference/shiny_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Shiny App UI. — shiny_ui","text":"","code":"shiny_ui()"},{"path":"/reference/upstream_owner.html","id":null,"dir":"Reference","previous_headings":"","what":"Clones the upstream mldash project, saves a ml_results object and creates a pull request\nso others can see past results of run_ml_models(). — upstream_owner","title":"Clones the upstream mldash project, saves a ml_results object and creates a pull request\nso others can see past results of run_ml_models(). — upstream_owner","text":"Clones upstream mldash project, saves ml_results object creates pull request others can see past results run_ml_models().","code":""},{"path":"/reference/upstream_owner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clones the upstream mldash project, saves a ml_results object and creates a pull request\nso others can see past results of run_ml_models(). — upstream_owner","text":"","code":"upstream_owner"},{"path":"/reference/upstream_owner.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clones the upstream mldash project, saves a ml_results object and creates a pull request\nso others can see past results of run_ml_models(). — upstream_owner","text":"object class character length 1.","code":""}]
